/**
 */
package serviceblueprint.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import serviceblueprint.util.ServiceblueprintAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServiceblueprintItemProviderAdapterFactory extends ServiceblueprintAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ServiceblueprintItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.ServiceBlueprintModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceBlueprintModelItemProvider serviceBlueprintModelItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.ServiceBlueprintModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceBlueprintModelAdapter() {
		if (serviceBlueprintModelItemProvider == null) {
			serviceBlueprintModelItemProvider = new ServiceBlueprintModelItemProvider(this);
		}

		return serviceBlueprintModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.ServiceBlueprintConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceBlueprintConnectionItemProvider serviceBlueprintConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.ServiceBlueprintConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceBlueprintConnectionAdapter() {
		if (serviceBlueprintConnectionItemProvider == null) {
			serviceBlueprintConnectionItemProvider = new ServiceBlueprintConnectionItemProvider(this);
		}

		return serviceBlueprintConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.ServiceBlueprintDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceBlueprintDiagramItemProvider serviceBlueprintDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.ServiceBlueprintDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceBlueprintDiagramAdapter() {
		if (serviceBlueprintDiagramItemProvider == null) {
			serviceBlueprintDiagramItemProvider = new ServiceBlueprintDiagramItemProvider(this);
		}

		return serviceBlueprintDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.ServiceBlueprintNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceBlueprintNodeItemProvider serviceBlueprintNodeItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.ServiceBlueprintNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceBlueprintNodeAdapter() {
		if (serviceBlueprintNodeItemProvider == null) {
			serviceBlueprintNodeItemProvider = new ServiceBlueprintNodeItemProvider(this);
		}

		return serviceBlueprintNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.PhysicalEvidence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalEvidenceItemProvider physicalEvidenceItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.PhysicalEvidence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalEvidenceAdapter() {
		if (physicalEvidenceItemProvider == null) {
			physicalEvidenceItemProvider = new PhysicalEvidenceItemProvider(this);
		}

		return physicalEvidenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.CustomerAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerActionItemProvider customerActionItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.CustomerAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerActionAdapter() {
		if (customerActionItemProvider == null) {
			customerActionItemProvider = new CustomerActionItemProvider(this);
		}

		return customerActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.OnStageEmployeeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnStageEmployeeActionItemProvider onStageEmployeeActionItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.OnStageEmployeeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnStageEmployeeActionAdapter() {
		if (onStageEmployeeActionItemProvider == null) {
			onStageEmployeeActionItemProvider = new OnStageEmployeeActionItemProvider(this);
		}

		return onStageEmployeeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.BackStageEmployeeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackStageEmployeeActionItemProvider backStageEmployeeActionItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.BackStageEmployeeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackStageEmployeeActionAdapter() {
		if (backStageEmployeeActionItemProvider == null) {
			backStageEmployeeActionItemProvider = new BackStageEmployeeActionItemProvider(this);
		}

		return backStageEmployeeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link serviceblueprint.SupportProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupportProcessItemProvider supportProcessItemProvider;

	/**
	 * This creates an adapter for a {@link serviceblueprint.SupportProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupportProcessAdapter() {
		if (supportProcessItemProvider == null) {
			supportProcessItemProvider = new SupportProcessItemProvider(this);
		}

		return supportProcessItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (serviceBlueprintModelItemProvider != null) serviceBlueprintModelItemProvider.dispose();
		if (serviceBlueprintConnectionItemProvider != null) serviceBlueprintConnectionItemProvider.dispose();
		if (serviceBlueprintDiagramItemProvider != null) serviceBlueprintDiagramItemProvider.dispose();
		if (serviceBlueprintNodeItemProvider != null) serviceBlueprintNodeItemProvider.dispose();
		if (physicalEvidenceItemProvider != null) physicalEvidenceItemProvider.dispose();
		if (customerActionItemProvider != null) customerActionItemProvider.dispose();
		if (onStageEmployeeActionItemProvider != null) onStageEmployeeActionItemProvider.dispose();
		if (backStageEmployeeActionItemProvider != null) backStageEmployeeActionItemProvider.dispose();
		if (supportProcessItemProvider != null) supportProcessItemProvider.dispose();
	}

}
